{"version":3,"sources":["services/blogservice.js","components/Blog.js","components/Blogs.js","components/togglable.js","components/addBlog.js","services/loginservice.js","components/login.js","components/logout.js","components/notification.js","App.js","index.js"],"names":["baseUrl","updateUrl","blogtosave","config","getAll","a","axios","get","response","sorted","data","sort","b","likes","saveBlog","post","res","updateBlog","put","deleteBlog","delete","createNew","user","blog","headers","Authorization","token","addLike","id","removeBlog","DeleteBtn","updateBlogs","updateMessage","deleteaction","window","confirm","blogservice","toString","onClick","className","Blog","useState","detailed","setDetailed","updatinglikes","setUpdatinglikes","toggleDetails","newlikes","key","title","author","url","name","Blogs","React","forwardRef","props","ref","displayName","blogs","setBlogs","useEffect","then","useImperativeHandle","map","Togglable","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","style","buttonLabel","children","AddBlog","blogRef","buttonRef","useRef","blogdetails","setBlogdetails","handleSubmit","event","preventDefault","current","message","onSubmit","type","value","onChange","target","login","username","password","Login","setUser","setUsername","setPassword","handleLogin","loginservice","userSTRING","JSON","stringify","localStorage","setItem","Logout","on","clear","Notification","text","App","setMessage","loggedUser","getItem","parse","setTimeout","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6a6c4a6e.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '/api/blogs'\n\nlet updateUrl = null\nlet blogtosave = null\nlet config = null\n\n// actual async funtions that does the rest operations. no parameters on async funtion so the data is forwarder with helper variables\n\nconst getAll = async() => {\n    const response = await axios.get(baseUrl)\n    const sorted = response.data.sort((a, b) => b.likes - a.likes)\n    return sorted\n}\n\nconst saveBlog = async() => {\n    const res = await axios.post(baseUrl, (blogtosave), config)\n    return res.data\n}\n\nconst updateBlog = async() => {\n    const res = await axios.put(updateUrl, (blogtosave), config)\n    return res.data\n}\n\nconst deleteBlog = async() => {\n    const res = await axios.delete(updateUrl, config)\n    return res.data\n\n}\n\n\n// funtions to export with user and blog parameters:\n\n\nconst createNew = (user, blog) => {\n    config = {\n        headers: { Authorization: `Bearer ${user.token}` }\n    }\n    blogtosave = { ...blog, likes: 0 }\n    return saveBlog()\n}\n\nconst addLike = (blog) => {\n    updateUrl = baseUrl + '/' + blog.id\n\n    blogtosave = { ...blog, user: blog.user.id }\n    return updateBlog()\n}\n\nconst removeBlog = (user, blog) => {\n    updateUrl = baseUrl + '/' + blog.id\n\n    config = {\n        headers: { Authorization: `Bearer ${user.token}` }\n    }\n\n    return deleteBlog()\n\n}\n\nexport default { getAll, createNew, addLike, removeBlog }","import React, { useState } from 'react'\nimport blogservice from '../services/blogservice'\n\n// halusin yksittäisen blogin muutoksen renderöivän uudestaan ainoastaan kyseisen blogin (ei koko blogilistaa)\n// tästä syystä blogin view nappulan ja like nappulan toiminnallisuus on toteutettu Blog komponentissa\n\nconst DeleteBtn = ({ user, blog, updateBlogs, updateMessage }) => {\n    const deleteaction = async () => {\n        if (window.confirm('are you sure??')) {\n            await blogservice.removeBlog(user, blog)\n            updateMessage('blog deleted!', 'message')\n            updateBlogs()\n        }\n    }\n\n    if (!user || !blog.user) return <> </>\n\n    if (user.id.toString() === blog.user.id.toString()) {\n        return (\n            <button onClick={deleteaction} className='delete'>\n                {' '}\n                DELETE{' '}\n            </button>\n        )\n    } else {\n        return <> </>\n    }\n}\n\nconst Blog = ({ blog, user, updateBlogs, updateMessage }) => {\n    const [detailed, setDetailed] = useState(false)\n    const [updatinglikes, setUpdatinglikes] = useState(null)\n\n    const toggleDetails = () => {\n        setDetailed(!detailed)\n    }\n\n    const addLike = async () => {\n        let newlikes = blog.likes + 1\n        setUpdatinglikes('Päivitetään...')\n        await blogservice.addLike(\n            { ...blog, likes: newlikes },\n            user\n        )\n        setUpdatinglikes(null)\n        updateBlogs()\n    }\n\n    if (detailed) {\n        return (\n            <div key={blog.id} className='blogdetail'>\n                <h3>\n\n                    {blog.title} <br />\n                    Kirjoittaja: {blog.author}\n                </h3>\n                <p>\n\n                    {blog.url} <br />\n                    likes: {updatinglikes ? updatinglikes : blog.likes}\n                    <button onClick={addLike} className='likebutton'> like </button>\n                    <br />\n                    Lisännyt: {blog.user.name}\n                </p>\n                <button onClick={toggleDetails} className='hidedetail'> hide </button>\n                <DeleteBtn\n                    key={'buttonkey' + blog.id}\n                    user={user}\n                    blog={blog}\n                    updateBlogs={updateBlogs}\n                    updateMessage={updateMessage}\n                ></DeleteBtn>\n            </div>\n        )\n    }\n\n    return (\n        <div key={blog.id} className='blog'>\n            <strong> Blogi: </strong> {blog.title}\n            <strong> Kirjoittaja: </strong> {blog.author}\n            <button onClick={toggleDetails} className='viewdetail'>view</button>\n            <DeleteBtn\n                key={'buttonkey' + blog.id}\n                user={user}\n                blog={blog}\n                updateBlogs={updateBlogs}\n                setDetailed={setDetailed}\n                updateMessage={updateMessage}\n            ></DeleteBtn>\n        </div>\n    )\n}\n\nexport default Blog\n","\nimport React, { useState, useEffect, useImperativeHandle } from 'react'\nimport blogservice from '../services/blogservice'\nimport Blog from './Blog'\n\n\nconst Blogs = React.forwardRef((props, ref) => {\n    Blogs.displayName = 'Blogs'\n\n    const [blogs, setBlogs] = useState([])\n\n    useEffect(() => {\n        blogservice.getAll().then(blogs => {\n            setBlogs(blogs)\n        })\n    }, [])\n\n    const updateBlogs = () => {\n        blogservice.getAll().then(blogs => {\n            setBlogs(blogs)\n        })\n    }\n\n\n    useImperativeHandle(ref, () => {\n        return {\n            updateBlogs\n        }\n    })\n\n\n    if (blogs) {\n        return (\n            <div>\n                {blogs.map(blog => {\n                    return (\n                        <Blog\n                            key={blog.id}\n                            blog={blog}\n                            user={props.user}\n                            updateBlogs={updateBlogs}\n                            updateMessage={props.updateMessage}>\n                        </Blog>\n                    )\n                })}\n            </div>\n        )\n    } else {\n        return <></>\n    }\n\n})\n\n\n\nexport default Blogs","import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst Togglable = React.forwardRef((props, ref) => {\n    const [visible, setVisible] = useState(false)\n\n    Togglable.propTypes = {\n        buttonLabel: PropTypes.string.isRequired\n    }\n\n    Togglable.displayName = 'Togglable'\n\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' }\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n\n    useImperativeHandle(ref, () => {\n        return {\n            toggleVisibility\n        }\n    })\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n            </div>\n            <div style={showWhenVisible}>\n                {props.children}\n                <button onClick={toggleVisibility}>Cancel</button>\n            </div>\n        </div>\n    )\n})\n\nexport default Togglable\n","import React, { useState,useRef } from 'react'\nimport blogservice from '../services/blogservice'\nimport Togglable from './togglable'\n\n\nconst AddBlog = ({ updateMessage, user, blogRef }) => {\n    const buttonRef = useRef()\n    const [blogdetails, setBlogdetails] = useState({ title: '', author: '', url: '' })\n\n\n    const handleSubmit = async (event) => {\n        event.preventDefault()\n\n        try {\n            const res = await blogservice.createNew(user, blogdetails)\n            setBlogdetails({ title: '', author: '', url: '' })\n            updateMessage(`succsesfully added ${res.title} by ${res.author}`,'message')\n            blogRef.current.updateBlogs()\n\n        } catch (exeption) {\n            updateMessage( exeption.message,'warning')\n        }\n    }\n\n    if (user) {\n        return (\n            <Togglable buttonLabel={'Create new blog'} ref={buttonRef} id='createblog'>\n                <div>\n                    <strong> <h2>Create new:</h2></strong>\n                    <form onSubmit={handleSubmit} id='addblogform'>\n                        <div>\n                            title:\n                            <input type=\"text\"\n                                id='title'\n                                value={blogdetails.title}\n                                name=\"title\"\n                                onChange={({ target }) => setBlogdetails({ ...blogdetails, title: target.value })}\n                            />\n                        </div>\n\n                        <div>\n                            author:\n                            <input type='text'\n                                id='author'\n                                value={blogdetails.author}\n                                name='author'\n                                onChange={({ target }) => setBlogdetails({ ...blogdetails, author: target.value })}\n                            />\n                        </div>\n\n                        <div>\n                            url:\n                            <input type='text'\n                                value={blogdetails.url}\n                                id='url'\n                                name='url'\n                                onChange={({ target }) => setBlogdetails({ ...blogdetails, url: target.value })}\n                            />\n                        </div>\n                        <button type='submit' id='submitblog'>Create</button>\n\n\n                    </form>\n\n                </div>\n            </Togglable>\n        )\n    } else {\n        return <></>\n    }\n\n\n}\n\nexport default AddBlog","import axios from 'axios'\n\nconst login = async(username, password) => {\n    const res = await axios.post('/api/login', ({ username: username, password: password }))\n    return res.data\n}\n\n\nexport default { login }","import React, { useState } from 'react'\nimport loginservice from '../services/loginservice'\n\nconst Login = ({ setUser, updateMessage, user }) => {\n\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n        setPassword('')\n        setUsername('')\n        try {\n            const user = await loginservice.login(username, password)\n            let userSTRING = JSON.stringify(user)\n            window.localStorage.setItem('userdata', userSTRING)\n            setUser(user)\n            updateMessage(`${user.name } succesfully logged in`,'message')\n        } catch (exeption) {\n\n            updateMessage('invalid credentials!','warning')\n\n        }\n    }\n    if (!user) {\n        return (\n            <div>\n                <strong> LOGIN:</strong>\n                <form onSubmit={handleLogin}>\n                    <div>\n                        username:\n                        <input type='text'\n                            id='username'\n                            value={username}\n                            name=\"username\"\n                            onChange={({ target }) => setUsername(target.value)}\n                        />\n                    </div>\n\n                    <div>\n                        password:\n                        <input type='text'\n                            id='password'\n                            value={password}\n                            name=\"username\"\n                            onChange={({ target }) => setPassword(target.value)}\n                        />\n                    </div>\n                    <button type='submit' id='submitlogin'>Login</button>\n\n\n                </form>\n\n            </div>\n        )\n    } else {\n        return <></>\n    }\n\n\n}\n\nexport default Login","import React from 'react'\n\nconst Logout = ({ user, setUser }) => {\n\n    const handlelogout = () => {\n        window.localStorage.clear()\n        setUser(null)\n    }\n\n    if (user) {\n        return (\n            <div>\n                <p>{user.name} logged in\n                    <button on onClick={handlelogout}> logout </button> </p>\n            </div >\n        )\n\n    } else {\n        return <></>\n    }\n}\n\nexport default Logout\n","import React from 'react'\nconst Notification = ({ message }) => {\n\n    if (message){\n        return (\n            <div className={message.type}>\n                <h3>{message.text}</h3>\n            </div>\n        )\n    }\n    else {\n        return <></>\n    }\n\n\n}\n\nexport default Notification\n","import React, { useState, useEffect, useRef } from 'react'\nimport Blogs from './components/Blogs'\nimport AddBlog from './components/addBlog'\nimport Login from './components/login'\nimport Logout from './components/logout'\nimport Notification from './components/notification'\n\nconst App = () => {\n    const [user, setUser] = useState(null)\n    const [message, setMessage] = useState(null)\n\n    useEffect(() => {\n        const loggedUser = window.localStorage.getItem('userdata')\n        if (loggedUser) {\n            const user = JSON.parse(loggedUser)\n            setUser(user)\n        }\n    }, [])\n\n    const updateMessage = (message, type) => {\n        setMessage({ text: message, type: type })\n        setTimeout(() => {\n            setMessage(null)\n        }, 5000)\n    }\n\n    const blogRef = useRef()\n\n    return (\n        <div>\n            <Notification message={message}> </Notification>\n            <Logout user={user} setUser={setUser}>\n            </Logout>\n            <Login\n                setUser={setUser}\n                updateMessage={updateMessage}\n                user={user}\n            ></Login>\n            <AddBlog\n                user={user}\n                updateMessage={updateMessage}\n                blogRef={blogRef}\n            ></AddBlog>\n            <Blogs user={user} ref={blogRef} updateMessage={updateMessage}>\n            </Blogs>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './app.css'\n\nReactDOM.render( <App/> , document.getElementById('root'))"],"sourceRoot":""}